'''Thank you'''
from colorama import Fore

# mid,1st,last.
# one element, empty, none exists
# repeat number, more than one pos
tests = []
tests.append({'Case': 0,
              'input': {
                  'card': [13, 11, 10, 7, 4, 3, 1, 0],
                  'query': 7},
              'output': 3})
tests.append({'Case': 1,
              'input': {
                  'card': [13, 11, 10, 7, 4, 3, 1, 0],
                  'query': 7},
              'output': 3})
tests.append({'Case': 2,
              'input': {
                  'card': [13, 11, 10, 7, 4, 3, 1, 0],
                  'query': 1},
              'output': 6})
tests.append({'Case': 3,
              'input': {
                  'card': [4, 2, 1, -1],
                  'query': 4},
              'output': 0})
tests.append({'Case': 4,
              'input': {
                  'card': [3, -1, -9, -127],
                  'query': -127},
              'output': 3})
tests.append({'Case': 5,
              'input': {
                  'card': [6],
                  'query': 6},
              'output': 0})
tests.append({'Case': 6,
              'input': {
                  'card': [9, 7, 5, 2, -9],
                  'query': 4},
              'output': -1})
tests.append({'Case': 7,
              'input': {
                  'card': [],
                  'query': 7},
              'output': -1})
tests.append({'Case': 8,
              'input': {
                  'card': [8, 8, 6, 6, 6, 6, 6, 3, 2, 2, 2, 0, 0, 0],
                  'query': 3},
              'output': 7})
tests.append({'Case': 9,
              'input': {
                  'card': [8, 8, 6, 6, 6, 6, 6, 3, 2, 2, 2, 0, 0, 0],
                  'query': 6},
              'output': 2})
tests.append({'Case': 10,
              'input': {
                  'card': [6, 6, 6, 6, 6, 6, 6, 3, 2, 2, 2, 0, 0, 0],
                  'query': 6},
              'output': 0})


# Linear Search O(1) O(n)
# def locate_card(card, query):
#     for item in card:
#         if item == query:
#             return card.index(item)
#     return -1

# def locate_card(card, query):
#     if query in card:
#         return card.index(query)
#     else:
#         return -1


# Binary Search O(1) O(logn)
# def test_location(card, query, mid):
#     midnumber = card[mid]
#     if midnumber == query:
#         if mid-1 >= 0 and midnumber == card[mid-1]:
#             return "left"
#         else:
#             return "found"
#     elif midnumber > query:
#         return "right"
#     elif midnumber < query:
#         return "left"


# def locate_card(card, query):
#     low, high = 0, len(card)-1
#     while low <= high:
#         mid = (low+high) // 2
#         pos = test_location(card, query, mid)
#         if pos == "left":
#             high = mid-1
#         elif pos == "right":
#             low = mid+1
#         elif pos == "found":
#             return mid
#     return -1


# def check1st(card, mid):
#     '''Finds the index of the first query card'''
#     if mid-1 >= 0 and card[mid] == card[mid-1]:
#         return check1st(card, mid-1)
#     else:
#         return mid


# def locate_card(card, query):
#     '''Finds the index of the query card'''
#     low, high = 0, len(card)-1
#     while high >= low:
#         mid = (low+high)//2
#         if card[mid] == query:
#             return check1st(card, mid)
#         elif card[mid] > query:
#             low = mid+1
#         elif card[mid] < query:
#             high = mid-1
#     return -1

def binary_tree(lo, hi, condition):
    while lo <= hi:
        mid = (lo + hi) // 2
        result = condition(mid)
        if result == 'found':
            return mid
        elif result == 'left':
            hi = mid - 1
        else:
            lo = mid + 1
    return -1


def locate_card(card, query):

    def condition(mid):
        if card[mid] == query:
            if mid > 0 and card[mid-1] == query:
                return 'left'
            else:
                return 'found'
        elif card[mid] > query:
            return 'right'
        else:
            return 'left'
    lo, hi = 0, len(card) - 1
    return binary_tree(lo, hi, condition)


for test in tests:
    if locate_card(**test['input']) == test['output']:
        print(Fore.BLUE + 'Case ' +
              str(test['Case']) + ':' + Fore.GREEN + ' PASS!')
    else:
        print(Fore.BLUE + 'Case ' +
              str(test['Case']) + ':' + Fore.RED + ' GG!')
